<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Header" xml:space="preserve">
    <value>Microsoft (R) {0} v{1}
Copyright (C) Microsoft Corporation. All rights reserved.

This tool analyzes .NET assemblies to determine possible problems moving between .NET platforms (such as
Windows Store, desktop, Mono, .NET Core, etc) as well as between .NET Framework versions (ie 4.x-&gt;4.y).

To learn more about how this tool works, including the data we are collecting, visit {2}.

For the full privacy statement, please visit {3}</value>
  </data>
  <data name="ListTargets" xml:space="preserve">
    <value>Use to see the available targets against which you can validate your assemblies</value>
  </data>
  <data name="ProgressReportDone" xml:space="preserve">
    <value>[Done]</value>
  </data>
  <data name="OutputWrittenTo" xml:space="preserve">
    <value>Wrote output to file:</value>
  </data>
  <data name="ProgressReportFailed" xml:space="preserve">
    <value>[Failed]</value>
  </data>
  <data name="AvailableTargets" xml:space="preserve">
    <value>Available Targets:</value>
    <comment>Used to display list of available targets</comment>
  </data>
  <data name="OverwriteFile" xml:space="preserve">
    <value>Replaced output file "{0}"</value>
    <comment>Displayed when a file exists and will be overwritten</comment>
  </data>
  <data name="AvailableAliases" xml:space="preserve">
    <value>Available Aliases:</value>
  </data>
  <data name="TargetsVersion" xml:space="preserve">
    <value>Versions:</value>
  </data>
  <data name="ApplicationName" xml:space="preserve">
    <value>API Portability Analyzer</value>
  </data>
  <data name="TargetsListNoVersion" xml:space="preserve">
    <value>- {0}</value>
  </data>
  <data name="VersionListJoin" xml:space="preserve">
    <value>; </value>
  </data>
  <data name="UnknownException" xml:space="preserve">
    <value>There was an unexpected error.  Please try again or contact apiport@microsoft.com for help.</value>
  </data>
  <data name="TargetsListGrouped" xml:space="preserve">
    <value>- {0} ({1})</value>
  </data>
  <data name="MonoWebRequestsFailure" xml:space="preserve">
    <value>If you are running on the mono runtime, you must configure root certificates before using this application.  Please see http://www.mono-project.com/docs/faq/security/</value>
  </data>
  <data name="ProgressReportInProgress" xml:space="preserve">
    <value>[In Progress{0}]</value>
  </data>
  <data name="AvailableOutputFormats" xml:space="preserve">
    <value>Available output formats:</value>
  </data>
  <data name="ListOutputFormats" xml:space="preserve">
    <value>Use to see what output formats are supported for the generated report.</value>
  </data>
  <data name="CmdAnalyzeShowBreakingChanges" xml:space="preserve">
    <value>Calculate breaking changes on full .NET Framework</value>
  </data>
  <data name="CmdAnalyzeShowNonPortableApis" xml:space="preserve">
    <value>Calculate non-portable APIs</value>
  </data>
  <data name="CmdAnalyzeIgnoreAssembliesFile" xml:space="preserve">
    <value>Specifies a json file defining assemblies that should not be analyzed for specific targets while analyzing breaking changes. This can be useful for excluding assemblies that are known to not regress on certain .NET Framework versions due to breaking changes. Note that, currently, this parameter only affects breaking change analysis and not portability analysis[</value>
  </data>
  <data name="CmdAnalyzeNoDefaultIgnoreFile" xml:space="preserve">
    <value>Do not use the standard assembly ignore list when analyzing breaking changes. The default ignore list can be found at KnownSafeBreaks.json</value>
  </data>
  <data name="CmdAnalyzeSuppressBreakingChange" xml:space="preserve">
    <value>Specifies a breaking change (by ID) to suppress during breaking change analysis. Any breaking changes with IDs specified for suppression will not be reported.</value>
  </data>
  <data name="CmdAnalyzeMessage" xml:space="preserve">
    <value>Analyzes specified files/directories for IL and determines the APIs that are used. This information is analyzed for portability concerns or known breaking changes (depending on input parameters) and returns a report that gives a summary of issues and possible steps forward.</value>
  </data>
  <data name="FileOutputServiceNotSupported" xml:space="preserve">
    <value>Analyze request file output does not support this operation</value>
  </data>
  <data name="CmdDocId" xml:space="preserve">
    <value>Provides an interactive console search for APIs. Useful to find the docid of a specific API</value>
  </data>
  <data name="TargetsDescription" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="TargetsName" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="TargetUsage" xml:space="preserve">
    <value>In order to specify a target, run the tool with the following command switch:
     ApiPort.exe analyze -t "(Target Name)" [other args]

In order to specify a version, please specify a target and a version with the following switch:
     ApiPort.exe analyze -t "(Target Name), Version=(Version)" [other args]

Versions marked with an asterisk (*) implies that these are default targets if none are submitted.</value>
  </data>
  <data name="Credentials_ForbiddenCredentials" xml:space="preserve">
    <value>The remote server indicated that the previous request was forbidden. Please provide credentials for: {0}</value>
  </data>
  <data name="Credentials_ProxyCredentials" xml:space="preserve">
    <value>Please provide proxy credentials:</value>
  </data>
  <data name="Credentials_RequestCredentials" xml:space="preserve">
    <value>Please provide credentials for: {0}</value>
  </data>
  <data name="Credentials_Password" xml:space="preserve">
    <value>Password:</value>
  </data>
  <data name="Credentials_UserName" xml:space="preserve">
    <value>Username:</value>
  </data>
  <data name="AvailableGroupedTargets" xml:space="preserve">
    <value>Available Grouped Targets:</value>
  </data>
  <data name="ReplEnterQuery" xml:space="preserve">
    <value>Enter a search query to find possible docids.</value>
  </data>
  <data name="ReplInvalidNumber" xml:space="preserve">
    <value>Invalid number: '{0}'</value>
  </data>
  <data name="ReplNoResultsFound" xml:space="preserve">
    <value>Did not find anything for search '{0}'</value>
  </data>
  <data name="ReplOptionCount" xml:space="preserve">
    <value>#count=</value>
  </data>
  <data name="ReplOptionCount_Text" xml:space="preserve">
    <value>Display [number] of search results.</value>
  </data>
  <data name="ReplOptionExit" xml:space="preserve">
    <value>#q</value>
  </data>
  <data name="ReplOptionExit_Text" xml:space="preserve">
    <value>Exit the REPL.</value>
  </data>
  <data name="ReplOptionsHeader" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="ReplUpdatedCount" xml:space="preserve">
    <value>Updated count to {0}</value>
  </data>
  <data name="Number" xml:space="preserve">
    <value>number</value>
  </data>
  <data name="CmdEndpoint" xml:space="preserve">
    <value>Portability service endpoint</value>
  </data>
  <data name="CmdAnalyzeFileInput" xml:space="preserve">
    <value>Path to assembly file or directory of assemblies</value>
  </data>
  <data name="CmdAnalyzeOutputFileName" xml:space="preserve">
    <value>Output file name</value>
  </data>
  <data name="CmdAnalyzeDescription" xml:space="preserve">
    <value>Description of submission</value>
  </data>
  <data name="CmdAnalyzeTarget" xml:space="preserve">
    <value>The target against which to check portability</value>
  </data>
  <data name="CmdAnalyzeResultFormat" xml:space="preserve">
    <value>Format to display output results</value>
  </data>
  <data name="CmdAnalyzeShowRetargettingIssues" xml:space="preserve">
    <value>Include the retargetting issues in the reports</value>
  </data>
  <data name="CmdAnalyzeTargetMap" xml:space="preserve">
    <value>Specifies a file to be use to map target names</value>
  </data>
  <data name="CmdDumpAnalysis" xml:space="preserve">
    <value>Write the analysis request to the output file without sending any data to the service</value>
  </data>
  <data name="CmdAnalyzeShowExceptionApis" xml:space="preserve">
    <value>Include the Apis that may throw PlatformNotSupported or NotImplemented exceptions</value>
  </data>
  <data name="CmdEntrypoint" xml:space="preserve">
    <value>Application that will be run after porting</value>
  </data>
</root>