<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DuplicateAliasError" xml:space="preserve">
    <value>Duplicate alias: '{0}'</value>
  </data>
  <data name="AliasCannotBeEqualToTargetNameError" xml:space="preserve">
    <value>Alias cannot be equal to a target name: '{0}'</value>
  </data>
  <data name="MalformedMap" xml:space="preserve">
    <value>Malformed map: {0}</value>
  </data>
  <data name="UnknownTarget" xml:space="preserve">
    <value>Unknown target '{0}'</value>
    <comment>Used to display a target that is unknown to us</comment>
  </data>
  <data name="ServerEndpointMovedPermanently" xml:space="preserve">
    <value>Error: The service endpoint has been deprecated. Please update the application to the latest version.</value>
    <comment>Server endpoint is deprecated</comment>
  </data>
  <data name="InvalidDataMessage" xml:space="preserve">
    <value>Invalid data</value>
    <comment>Shown when an exception is thrown</comment>
  </data>
  <data name="HttpExceptionMessage" xml:space="preserve">
    <value>There was an unknown error attempting to reach the service.  Please try again.</value>
  </data>
  <data name="BadRequestMessage" xml:space="preserve">
    <value>Bad request. Please make sure you have the most up-to-date version of this tool.</value>
    <comment>BadRequest status code is returned for many issues.  If it is unknown, display the returned information.</comment>
  </data>
  <data name="UnknownErrorCodeMessage" xml:space="preserve">
    <value>There was an unknown error code from the service: '{0}'.  Please make sure you have the most up-to-date version.</value>
    <comment>Shown when an error code is returned that is unknown to the application</comment>
  </data>
  <data name="FullAssemblyIdentity" xml:space="preserve">
    <value>{0}, FileVersion:{1}</value>
  </data>
  <data name="ComputingReport" xml:space="preserve">
    <value>Computing report.</value>
  </data>
  <data name="IdentifyAssembliesToScan" xml:space="preserve">
    <value>Identifying assemblies to scan.</value>
  </data>
  <data name="ProcessedFiles" xml:space="preserve">
    <value>Processed {0}/{1} files.</value>
  </data>
  <data name="ProcessedItems" xml:space="preserve">
    <value>Processed {0} items.</value>
  </data>
  <data name="RetrievingTargets" xml:space="preserve">
    <value>Retrieving targets</value>
  </data>
  <data name="AnalyzingCompatibility" xml:space="preserve">
    <value>Analyzing compatibility</value>
  </data>
  <data name="ServerEndpointDeprecated" xml:space="preserve">
    <value>Warning: A newer version of the application is available. Please update to the latest version to continue using this service</value>
  </data>
  <data name="MemberShouldBeDefinedOnTypeException" xml:space="preserve">
    <value>Member should be defined on a type</value>
    <comment>Exception string when member is not found on type</comment>
  </data>
  <data name="AliasMappedToMultipleNamesInvalidAliases" xml:space="preserve">
    <value>Only single mappings between name and alias are supported.  The following aliases are invalid: {0}</value>
  </data>
  <data name="TargetInformationGroups" xml:space="preserve">
    <value>{0} ({1})</value>
    <comment>{0} is the name of the group and {1} is a string representing what it expands to</comment>
  </data>
  <data name="SupportedOn" xml:space="preserve">
    <value>Supported: {0}+</value>
    <comment>{0} -- is a version number</comment>
  </data>
  <data name="UnauthorizedAccess" xml:space="preserve">
    <value>Endpoint requires an authentication token.</value>
  </data>
  <data name="ProductInformationInvalidArgument" xml:space="preserve">
    <value>Must only contain letters or digits</value>
  </data>
  <data name="HowToSpecifyVersion" xml:space="preserve">
    <value>In order to specify a version, please use the following format with the '-targets' option:
	(Target Name), Version=(Version)</value>
  </data>
  <data name="InvalidFileName" xml:space="preserve">
    <value>Invalid file name: '{0}'</value>
  </data>
  <data name="NoFilesToAnalyze" xml:space="preserve">
    <value>No files were found to analyze.</value>
  </data>
  <data name="NotFoundException" xml:space="preserve">
    <value>Resource was not found for {0} {1}</value>
  </data>
  <data name="ChangingFileExtension" xml:space="preserve">
    <value>The given filename [{0}] has a different extension than the output format extension. Changed extension '{1}' to '{2}'.</value>
    <comment>Warning when we are changing the output file name.</comment>
  </data>
  <data name="OverwriteFile" xml:space="preserve">
    <value>File '{0}' already exists and will be overwritten.</value>
    <comment>Displayed when a file exists and will be overwritten</comment>
  </data>
  <data name="InvalidAssembly" xml:space="preserve">
    <value>{0} is an invalid assembly.</value>
    <comment>HTML: An assembly used in the portability analysis that cannot be resolved</comment>
  </data>
  <data name="ProgressReportDone" xml:space="preserve">
    <value>[Done]</value>
  </data>
  <data name="ProgressReportFailed" xml:space="preserve">
    <value>[Failed]</value>
  </data>
  <data name="RetrievingOutputFormats" xml:space="preserve">
    <value>Retrieving output formats.</value>
  </data>
  <data name="UnknownResultFormat" xml:space="preserve">
    <value>Unknown output format: '{0}'</value>
  </data>
  <data name="WritingReport" xml:space="preserve">
    <value>Writing {0} report</value>
    <comment>Tells the format that is being written</comment>
  </data>
  <data name="CouldNotWriteReport" xml:space="preserve">
    <value>Could not write report to directory '{0}' with file name '{1}' and extension '{2}'.</value>
  </data>
  <data name="InvalidCategoryDetected" xml:space="preserve">
    <value>Invalid category detected: {0}</value>
  </data>
  <data name="InvalidBreakingChangeParserState" xml:space="preserve">
    <value>Unhandled breaking change parse state: {0}</value>
  </data>
  <data name="ProxyAuthenticationRequiredMessage" xml:space="preserve">
    <value>Proxy authentication required to access: {0}. To resolve, try setting proxy in config.json.</value>
  </data>
  <data name="RequestTooLargeMessage" xml:space="preserve">
    <value>Request to service is too large. Send fewer assemblies for analysis. Content length: {0} bytes</value>
  </data>
  <data name="TooManyTargetsMessage" xml:space="preserve">
    <value>Excel output format supports up to {0} targets for analysis at a time.</value>
  </data>
  <data name="FrameworkNameHeader" xml:space="preserve">
    <value>Framework</value>
    <comment>Framework name header column in Excel</comment>
  </data>
  <data name="VersionHeader" xml:space="preserve">
    <value>Version</value>
    <comment>Version header column in Excel</comment>
  </data>
  <data name="MustBeValidEndpoint" xml:space="preserve">
    <value>Must be a valid endpoint</value>
  </data>
  <data name="AliasShouldBeSeparated" xml:space="preserve">
    <value>An alias should be separated from names by '{0}'</value>
  </data>
  <data name="AssemblyReferenceInformation" xml:space="preserve">
    <value>{0}, Version={1}, Culture={2}, PublicKeyToken={3}</value>
  </data>
  <data name="CannotAddToRunningQueryPath" xml:space="preserve">
    <value>Cannot add to the path once a query has begun</value>
  </data>
  <data name="Targets" xml:space="preserve">
    <value>Targets</value>
  </data>
  <data name="NotSupported" xml:space="preserve">
    <value>Not supported</value>
  </data>
  <data name="InvalidPublicKeyToken" xml:space="preserve">
    <value>Could not parse public key token '{0}'</value>
  </data>
</root>